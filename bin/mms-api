#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib')

require 'mms'
require 'optparse'
require 'terminal-table'
require 'pp'

name = 'mms-api'
version = MMS::VERSION

actions_available = ["groups", "clusters", "snapshots", "restorejobs", "restorejobs-create"]

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{name} [options] action"

  opts.on("-u", "--username <string>", "MMS user") do |u|
    options[:username] = u
  end

  opts.on("-k", "--apikey <string>", "MMS api-key") do |k|
    options[:apikey] = k
  end

  options[:limit] = 5
  opts.on("-l", "--limit <string>", "Limit for result lines") do |l|
    options[:limit] = l.to_i
  end

  opts.on("-v", "--version", "Version") do |v|
    puts "#{name} v#{version}"
    exit
  end

  opts.on("-h", "--help", "Show this help") do |h|
    puts opts
    exit
  end
end

begin
  optparse.parse!
  if not options[:username]
    puts "Missing options: MMS username [-u <string>]"
    exit
  end
  if not options[:apikey]
    puts "Missing options: MMS api-key [-k <string>]"
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end

begin
  action = ARGV.first.downcase
  raise("Unknown action #{action.upcase}") unless actions_available.include? (action)
rescue => e
  puts "Error: #{e.message}"
  puts "Available actions: #{(actions_available.join ', ').upcase}"
  puts optparse
  exit 1
end

#begin
  agent = MMS::Agent.new(options[:username], options[:apikey])
  ARGV.shift
  results = agent.send action.sub('-', '_'), *ARGV

  rows = []
  case action
    when 'groups'
      heading = ['Name', 'Active Agents', 'Replicas count', 'Shards count', 'Last Active Agent']
      results.each do |group|
        rows << [group.name, group.active_agent_count, group.replicaset_count, group.shard_count, group.last_active_agent]
      end
    when 'clusters'
      heading = ['Group', 'Cluster', 'Shard name', 'Replica name', 'Type', 'Last heartbeat']
      results.each do |cluster|
        rows << [cluster.group.name, cluster.name, cluster.shard_name, cluster.replicaset_name, cluster.type_name, cluster.last_heartbeat]
      end
    when 'snapshots'
      heading = ['Group', 'Cluster', 'SnapshotId', 'Complete', 'Created increment', 'Created date', 'Expires']
      results_sorted = results.sort_by { |snapshot| snapshot.created_date }.reverse
      results_sorted.first(options[:limit]).each do |snapshot|
        rows << [snapshot.cluster.group.name, snapshot.cluster.name, snapshot.id, snapshot.complete, snapshot.created_increment, snapshot.created_date, snapshot.expires]
        rows << :separator
        part_count = 0
        snapshot.parts.each do |part|
          file_size_mb = part['fileSizeBytes'].to_i / (1024*1024)
          rows << [{:value => "part #{part_count}", :colspan => 4, :alignment => :right}, part['typeName'], part['replicaSetName'], "#{file_size_mb} MB"]
          part_count += 1
        end
        rows << :separator
      end
    when 'restorejobs', 'restorejobs-create'
      heading = ['RestoreId', 'SnapshotId / Cluster / Group', 'Created', 'Status', 'Point in time', 'Delivery', 'Restore status']
      results_sorted = results.sort_by { |job| job.created }.reverse
      results_sorted.first(options[:limit]).each do |job|
        rows << [job.id, job.snapshot_id, job.created, job.status_name, job.point_in_time, job.delivery_method_name, job.delivery_status_name]
        rows << ['', "#{job.cluster.name} (#{job.cluster.id})", {:value => '', :colspan => 5}]
        rows << ['', job.cluster.group.name, {:value => '', :colspan => 5}]
        rows << [{:value => 'download url:', :colspan => 7}]
        rows << [{:value => job.delivery_url, :colspan => 7}]
        rows << :separator
      end
  end

  table = Terminal::Table.new :title => action.upcase, :headings => (heading.nil? ? [] : heading), :rows => rows

  puts table

#rescue => e
 # exit 1
#end
